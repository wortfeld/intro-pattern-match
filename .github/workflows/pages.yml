name: Build & Deploy Pages (ffmpeg.wasm PoC)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

env:
  FFMPEG_VERSION: 0.12.15   # Browser-Bundle
  CORE_VERSION: 0.12.10     # Single-thread core (3 Dateien unter /dist)

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 20 }

      - name: Build public/
        run: |
          set -eux
          mkdir -p public/vendor/ffmpeg/core public/vendor/ffmpeg/umd

          # @ffmpeg/core – tarball holen, entpacken, 3 Dateien kopieren
          CORE_TGZ="$(npm pack @ffmpeg/core@${CORE_VERSION})"
          tar -xzf "$CORE_TGZ"
          cp package/dist/ffmpeg-core.* public/vendor/ffmpeg/core/
          rm -rf package "$CORE_TGZ"

          # @ffmpeg/ffmpeg (UMD) – inkl. Chunk-Dateien
          FFMPEG_TGZ="$(npm pack @ffmpeg/ffmpeg@${FFMPEG_VERSION})"
          tar -xzf "$FFMPEG_TGZ"
          cp -r package/dist/umd/* public/vendor/ffmpeg/umd/
          rm -rf package "$FFMPEG_TGZ"

          # index.html in public/ kopieren + .nojekyll
          cp index.html public/index.html
          touch public/.nojekyll

          echo "VERIFY:"
          test -f public/vendor/ffmpeg/core/ffmpeg-core.js
          test -f public/vendor/ffmpeg/core/ffmpeg-core.wasm
          test -f public/vendor/ffmpeg/core/ffmpeg-core.worker.js
          test -f public/vendor/ffmpeg/umd/ffmpeg.js
          ls -l public/vendor/ffmpeg/core/ || true

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with: { path: public }

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
